"""
–≠–∫—Å–ø–æ—Ä—Ç YOLO11 –º–æ–¥–µ–ª–∏ –≤ ONNX —Å –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏–µ–º
"""
from ultralytics import YOLO
import argparse


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--model', type=str, default='yolo11n-seg.pt', help='–ú–æ–¥–µ–ª—å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞')
    parser.add_argument('--imgsz', type=int, default=640, help='–†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–∞')
    parser.add_argument('--half', action='store_true', help='FP16 (–¥–ª—è GPU, –±—ã—Å—Ç—Ä–µ–µ)')
    parser.add_argument('--int8', action='store_true', help='INT8 (—Ç–æ–ª—å–∫–æ –¥–ª—è OpenVINO, –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ –Ω–∞ CPU)')
    parser.add_argument('--format', type=str, default='onnx', 
                        choices=['onnx', 'engine', 'openvino'],
                        help='–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞: onnx, engine (TensorRT), openvino')
    args = parser.parse_args()
    
    print("="*70)
    print(f"–≠–∫—Å–ø–æ—Ä—Ç {args.model}")
    print(f"–§–æ—Ä–º–∞—Ç: {args.format.upper()}")
    print(f"–†–∞–∑–º–µ—Ä: {args.imgsz}")
    print(f"FP16: {args.half}")
    print(f"INT8: {args.int8}")
    print("="*70)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ INT8
    if args.int8 and args.format != 'openvino':
        print("\n‚ö†Ô∏è INT8 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è OpenVINO!")
        print("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—é –Ω–∞ --format openvino")
        args.format = 'openvino'
    
    model = YOLO(args.model)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
    export_kwargs = {
        'format': args.format,
        'imgsz': args.imgsz,
        'half': args.half,
    }
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è ONNX
    if args.format == 'onnx':
        export_kwargs['simplify'] = True
        export_kwargs['dynamic'] = False
        export_kwargs['opset'] = 12
    
    # TensorRT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    elif args.format == 'engine':
        if not args.half:
            print("‚ö†Ô∏è –î–ª—è TensorRT —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è --half –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        export_kwargs['workspace'] = 4  # GB
    
    # OpenVINO –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    elif args.format == 'openvino':
        export_kwargs['int8'] = args.int8
        if args.int8:
            print("OpenVINO —Å INT8 –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏–µ–º (–º–∞–∫—Å. —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞ CPU)")
        else:
            print("OpenVINO –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è Intel CPU/GPU")
    
    path = model.export(**export_kwargs)
    
    suffix = f" ({args.format.upper()}"
    if args.half:
        suffix += " FP16)"
    elif args.int8:
        suffix += " INT8)"
    else:
        suffix += ")"
    
    print(f"\n‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {path}{suffix}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–ø—É—Å–∫—É
    print(f"\n–ó–∞–ø—É—Å–∫:")
    if args.format == 'onnx':
        if args.half:
            print(f"  python yolo_seg_onnx.py --model {path} --device cuda")
        else:
            print(f"  python yolo_seg_onnx.py --model {path} --device cpu")
            print(f"  python yolo_seg_onnx.py --model {path} --device cuda")
    elif args.format == 'engine':
        print(f"  # TensorRT —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ GPU")
        print(f"  python yolo_seg_onnx.py --model {path} --device cuda")
    elif args.format == 'openvino':
        print(f"  # OpenVINO –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è Intel CPU")
        print(f"  python yolo_seg_onnx.py --model {path} --device cpu")
    
    print(f"\nüí° –ö–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏–µ ({suffix}) —É–∂–µ –≤ –º–æ–¥–µ–ª–∏, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ –Ω—É–∂–Ω–æ!")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\n–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤:")
    print(f"  ONNX:         —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π, CPU/GPU")
    print(f"  TensorRT:     –º–∞–∫—Å. —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞ NVIDIA GPU")
    print(f"  OpenVINO:     –º–∞–∫—Å. —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞ Intel CPU")
    print(f"  OpenVINO INT8: ~2-4x –±—ã—Å—Ç—Ä–µ–µ –Ω–∞ CPU")
    
    print(f"\n–ü—Ä–∏–º–µ—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞:")
    print(f"  # ONNX FP16 –¥–ª—è GPU")
    print(f"  python export_to_onnx.py --model {args.model} --format onnx --half")
    print(f"  # TensorRT FP16 –¥–ª—è NVIDIA GPU")
    print(f"  python export_to_onnx.py --model {args.model} --format engine --half")
    print(f"  # OpenVINO INT8 –¥–ª—è CPU (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å)")
    print(f"  python export_to_onnx.py --model {args.model} --format openvino --int8")


if __name__ == "__main__":
    main()

