import React, { useState, useEffect, useRef } from "react";

export default function DraggableText({ block, onUpdate, selected, onSelect, parentRef, backgroundLayerRef }) {
  const [dragging, setDragging] = useState(false);
  const [offset, setOffset] = useState({ x: 0, y: 0 });
  const [autoColor, setAutoColor] = useState({ text: block.color, stroke: '#000000', luminance: 0.5, contrast: 4.5 });
  const textRef = useRef(null);
  const dragStateRef = useRef({ 
    isDragging: false, 
    offsetX: 0, 
    offsetY: 0,
    hasMoved: false,
    startX: 0,
    startY: 0
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ–Ω–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞
  const analyzeBackgroundAndSetColor = () => {
    if (!backgroundLayerRef?.current || !textRef.current) return;

    try {
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π canvas –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ–Ω–∞
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d', { willReadFrequently: true });
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏ –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—Å—Ç–∞
      const textRect = textRef.current.getBoundingClientRect();
      const bgRect = backgroundLayerRef.current.getBoundingClientRect();
      
      // –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ñ–æ–Ω–µ
      const relX = textRect.left - bgRect.left;
      const relY = textRect.top - bgRect.top;
      const width = Math.min(textRect.width, 200); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      const height = Math.min(textRect.height, 100);
      
      if (width <= 0 || height <= 0) return;
      
      canvas.width = width;
      canvas.height = height;
      
      // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const bgStyle = window.getComputedStyle(backgroundLayerRef.current);
      const bgImage = bgStyle.backgroundImage;
      
      if (bgImage && bgImage !== 'none') {
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ
        const img = new Image();
        img.crossOrigin = "anonymous";
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ CSS url()
        const match = bgImage.match(/url\(['"]?([^'"]+)['"]?\)/);
        if (match) {
          img.src = match[1];
          img.onload = () => {
            // –†–∏—Å—É–µ–º —á–∞—Å—Ç—å —Ñ–æ–Ω–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–æ–∑–∏—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
            const scale = img.naturalWidth / bgRect.width;
            ctx.drawImage(
              img,
              relX * scale, relY * scale,
              width * scale, height * scale,
              0, 0, width, height
            );
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞
            const imageData = ctx.getImageData(0, 0, width, height);
            const { avgR, avgG, avgB, relativeLuminance } = analyzeImageData(imageData);
            
            // –ù–∞—Ö–æ–¥–∏–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π —Ü–≤–µ—Ç –ø–æ WCAG AA
            const contrastColor = findContrastColor(avgR, avgG, avgB, 4.5);
            const textColor = `rgb(${contrastColor.r}, ${contrastColor.g}, ${contrastColor.b})`;
            // –û–±–≤–æ–¥–∫–∞ ‚Äî –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π —Ü–≤–µ—Ç
            const strokeColor = contrastColor.r > 128 ? '#000000' : '#ffffff';
            
            console.log(`üìä WCAG Analysis: BG(${avgR},${avgG},${avgB}) L=${relativeLuminance.toFixed(3)} ‚Üí Text: ${textColor} (contrast: ${contrastColor.contrast.toFixed(2)}:1)`);
            
            setAutoColor({ text: textColor, stroke: strokeColor, luminance: relativeLuminance, contrast: contrastColor.contrast });
          };
        }
      } else {
        // –ï—Å–ª–∏ —Ñ–æ–Ω –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –∏–ª–∏ –æ–¥–Ω–æ—Ç–æ–Ω–Ω—ã–π
        const bgColor = bgStyle.backgroundColor;
        const rgb = parseRGB(bgColor);
        if (rgb) {
          const relativeLuminance = getRelativeLuminance(rgb.r, rgb.g, rgb.b);
          
          // –ù–∞—Ö–æ–¥–∏–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π —Ü–≤–µ—Ç –ø–æ WCAG AA
          const contrastColor = findContrastColor(rgb.r, rgb.g, rgb.b, 4.5);
          const textColor = `rgb(${contrastColor.r}, ${contrastColor.g}, ${contrastColor.b})`;
          const strokeColor = contrastColor.r > 128 ? '#000000' : '#ffffff';
          
          console.log(`üìä WCAG Analysis (gradient): BG(${rgb.r},${rgb.g},${rgb.b}) L=${relativeLuminance.toFixed(3)} ‚Üí Text: ${textColor} (contrast: ${contrastColor.contrast.toFixed(2)}:1)`);
          
          setAutoColor({ text: textColor, stroke: strokeColor, luminance: relativeLuminance, contrast: contrastColor.contrast });
        }
      }
    } catch (error) {
      console.warn('Background analysis failed:', error);
    }
  };

  // WCAG: –í—ã—á–∏—Å–ª–µ–Ω–∏–µ relative luminance —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É
  const getRelativeLuminance = (r, g, b) => {
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è RGB (0-255) –∫ (0-1)
    const rsRGB = r / 255;
    const gsRGB = g / 255;
    const bsRGB = b / 255;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–∞–º–º–∞-–∫–æ—Ä—Ä–µ–∫—Ü–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ WCAG
    const rLinear = rsRGB <= 0.03928 ? rsRGB / 12.92 : Math.pow((rsRGB + 0.055) / 1.055, 2.4);
    const gLinear = gsRGB <= 0.03928 ? gsRGB / 12.92 : Math.pow((gsRGB + 0.055) / 1.055, 2.4);
    const bLinear = bsRGB <= 0.03928 ? bsRGB / 12.92 : Math.pow((bsRGB + 0.055) / 1.055, 2.4);
    
    // Relative luminance –ø–æ —Ñ–æ—Ä–º—É–ª–µ WCAG
    return 0.2126 * rLinear + 0.7152 * gLinear + 0.0722 * bLinear;
  };

  // WCAG: –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É –¥–≤—É–º—è —Ü–≤–µ—Ç–∞–º–∏
  const getContrastRatio = (lum1, lum2) => {
    const lighter = Math.max(lum1, lum2);
    const darker = Math.min(lum1, lum2);
    return (lighter + 0.05) / (darker + 0.05);
  };

  // –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –ø–æ WCAG AA (4.5:1 –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞)
  const findContrastColor = (bgR, bgG, bgB, targetRatio = 4.5) => {
    const bgLuminance = getRelativeLuminance(bgR, bgG, bgB);
    
    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å —Å –±–µ–ª—ã–º –∏ —á–µ—Ä–Ω—ã–º
    const whiteLuminance = 1; // –±–µ–ª—ã–π = 1
    const blackLuminance = 0; // —á–µ—Ä–Ω—ã–π = 0
    
    const whiteContrast = getContrastRatio(whiteLuminance, bgLuminance);
    const blackContrast = getContrastRatio(blackLuminance, bgLuminance);
    
    // –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç —Å –ª—É—á—à–µ–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å—é
    if (whiteContrast > blackContrast) {
      return { r: 255, g: 255, b: 255, contrast: whiteContrast };
    } else {
      return { r: 0, g: 0, b: 0, contrast: blackContrast };
    }
  };

  // –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–π —è—Ä–∫–æ—Å—Ç–∏ –∏ –¥–æ–º–∏–Ω–∞–Ω—Ç–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
  const analyzeImageData = (imageData) => {
    const data = imageData.data;
    let totalR = 0, totalG = 0, totalB = 0;
    let pixelCount = 0;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π 4-–π –ø–∏–∫—Å–µ–ª—å –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    for (let i = 0; i < data.length; i += 16) {
      totalR += data[i];
      totalG += data[i + 1];
      totalB += data[i + 2];
      pixelCount++;
    }
    
    const avgR = totalR / pixelCount;
    const avgG = totalG / pixelCount;
    const avgB = totalB / pixelCount;
    
    // –í—ã—á–∏—Å–ª—è–µ–º relative luminance –ø–æ WCAG
    const relativeLuminance = getRelativeLuminance(avgR, avgG, avgB);
    
    return {
      avgR: Math.round(avgR),
      avgG: Math.round(avgG),
      avgB: Math.round(avgB),
      relativeLuminance,
      dominantColor: `rgb(${Math.round(avgR)}, ${Math.round(avgG)}, ${Math.round(avgB)})`
    };
  };

  // –ü–∞—Ä—Å–∏–Ω–≥ RGB –∏–∑ CSS —Å—Ç—Ä–æ–∫–∏
  const parseRGB = (color) => {
    const match = color.match(/rgba?\((\d+),\s*(\d+),\s*(\d+)/);
    if (match) {
      return { r: parseInt(match[1]), g: parseInt(match[2]), b: parseInt(match[3]) };
    }
    return null;
  };

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ–Ω –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
  useEffect(() => {
    analyzeBackgroundAndSetColor();
  }, [block.x, block.y, block.fontSize, backgroundLayerRef]);

  const handleMouseDown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    
    const parentRect = parentRef.current.getBoundingClientRect();
    const offsetX = e.clientX - parentRect.left - block.x;
    const offsetY = e.clientY - parentRect.top - block.y;
    
    setOffset({ x: offsetX, y: offsetY });
    setDragging(true);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –±—ã–ª –ª–∏ —ç—Ç–æ –∫–ª–∏–∫ –∏–ª–∏ drag
    dragStateRef.current = { 
      isDragging: true, 
      offsetX, 
      offsetY,
      hasMoved: false,
      startX: e.clientX,
      startY: e.clientY
    };
  };

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å—Ä—ã–≤–∞ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏
  useEffect(() => {
    const handleGlobalMouseMove = (e) => {
      if (!dragStateRef.current.isDragging || !parentRef.current) return;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–¥–≤–∏–Ω—É–ª–∞—Å—å –ª–∏ –º—ã—à—å –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ 5 –ø–∏–∫—Å–µ–ª–µ–π
      const deltaX = Math.abs(e.clientX - dragStateRef.current.startX);
      const deltaY = Math.abs(e.clientY - dragStateRef.current.startY);
      
      if (deltaX > 5 || deltaY > 5) {
        dragStateRef.current.hasMoved = true;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–æ –¥–≤–∏–∂–µ–Ω–∏–µ
      if (dragStateRef.current.hasMoved) {
        const parentRect = parentRef.current.getBoundingClientRect();
        const newX = e.clientX - parentRect.left - dragStateRef.current.offsetX;
        const newY = e.clientY - parentRect.top - dragStateRef.current.offsetY;
        
        onUpdate(block.id, { x: newX, y: newY });
      }
    };

    const handleGlobalMouseUp = () => {
      if (dragStateRef.current.isDragging) {
        // –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –¥–≤–∏–∂–µ–Ω–∏—è - —ç—Ç–æ –∫–ª–∏–∫, –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä
        if (!dragStateRef.current.hasMoved) {
          onSelect(block.id);
        }
        
        setDragging(false);
        dragStateRef.current.isDragging = false;
        dragStateRef.current.hasMoved = false;
      }
    };

    if (dragging) {
      document.addEventListener('mousemove', handleGlobalMouseMove);
      document.addEventListener('mouseup', handleGlobalMouseUp);
    }

    return () => {
      document.removeEventListener('mousemove', handleGlobalMouseMove);
      document.removeEventListener('mouseup', handleGlobalMouseUp);
    };
  }, [dragging, block.id, onUpdate, onSelect, parentRef]);

  // –ö—É—Ä—Å–æ—Ä grabbing —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º
  const cursorStyle = (dragging && dragStateRef.current.hasMoved) ? "grabbing" : "grab";

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏ –æ–±–≤–æ–¥–∫—É
  const finalTextColor = autoColor.text || block.color;
  const strokeColor = autoColor.stroke || '#000000';
  
  // –£–º–Ω–∞—è –æ–±–≤–æ–¥–∫–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
  const smartTextShadow = `
    -1px -1px 0 ${strokeColor},
    1px -1px 0 ${strokeColor},
    -1px 1px 0 ${strokeColor},
    1px 1px 0 ${strokeColor},
    0 0 3px ${strokeColor},
    0 0 5px ${strokeColor}
  `;

  return (
    <div
      ref={textRef}
      style={{
        position: "absolute",
        left: block.x,
        top: block.y,
        fontSize: `${block.fontSize}px`,
        color: finalTextColor,
        fontFamily: block.fontFamily || 'Arial',
        fontWeight: block.fontWeight || 'normal',
        fontStyle: block.fontStyle || 'normal',
        cursor: cursorStyle,
        userSelect: "none",
        border: selected ? "2px solid #2a5298" : "2px solid transparent",
        padding: "4px 8px",
        borderRadius: "4px",
        backgroundColor: selected ? "rgba(42, 82, 152, 0.1)" : "transparent",
        transition: selected ? "none" : "color 0.3s ease, text-shadow 0.3s ease",
        whiteSpace: "nowrap",
        textShadow: smartTextShadow,
        zIndex: 1, // –¢–µ–∫—Å—Ç –º–µ–∂–¥—É —Ñ–æ–Ω–æ–º (0) –∏ canvas (2)
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —á–∏—Ç–∞–µ–º–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é webkit
        WebkitFontSmoothing: 'antialiased',
        MozOsxFontSmoothing: 'grayscale'
      }}
      onMouseDown={handleMouseDown}
    >
      {block.text}
    </div>
  );
}