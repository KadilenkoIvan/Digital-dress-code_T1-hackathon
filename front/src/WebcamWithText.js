import React, { useRef, useEffect, useState } from "react";
import * as ort from "onnxruntime-web";
import DraggableText from "./DraggableText";

export default function WebcamWithText({ blocks, setBlocks, selectedBlockId, setSelectedBlockId, onStatsUpdate, backgroundImage }) {
  const videoRef = useRef(null);
  const canvasRef = useRef(null);
  const containerRef = useRef(null);
  const [session, setSession] = useState(null);
  const recRef = useRef([]);
  const backgroundRef = useRef(null);
  const frameCountRef = useRef(0);
  const totalTimeRef = useRef(0);
  const lastStatsUpdateRef = useRef(0); // –î–ª—è throttling –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const downsampleCanvasRef = useRef(null); // Canvas –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const maskCanvasRef = useRef(null); // Canvas –¥–ª—è –º–∞—Å–∫–∏ —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
  const fullMaskCanvasRef = useRef(null); // Canvas –¥–ª—è –º–∞—Å–∫–∏ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
  const backendNameRef = useRef('Loading...'); // –ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ backend
  const prevMaskRef = useRef(null); // –ü—Ä–µ–¥—ã–¥—É—â–∞—è –º–∞—Å–∫–∞ –¥–ª—è temporal smoothing
  
  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–º–µ–Ω—å—à–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏ (0.4 = 40% –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞)
  // –ú–µ–Ω—å—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ = –±—ã—Å—Ç—Ä–µ–µ —Ä–∞–±–æ—Ç–∞, –Ω–æ –Ω–∏–∂–µ –∫–∞—á–µ—Å—Ç–≤–æ
  // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 0.3-0.5
  const MODEL_SCALE = 0.2; // 0.2-0.5: –º–µ–Ω—å—à–µ = –±—ã—Å—Ç—Ä–µ–µ —Ä–∞–±–æ—Ç–∞, –Ω–æ –Ω–∏–∂–µ –∫–∞—á–µ—Å—Ç–≤–æ (0.25 = —Ö–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å)
  const downsampleRatioQuality = 0.8; // 0.5-0.9: –º–µ–Ω—å—à–µ = –±—ã—Å—Ç—Ä–µ–µ —Ä–∞–±–æ—Ç–∞, –Ω–æ –Ω–∏–∂–µ –∫–∞—á–µ—Å—Ç–≤–æ (0.8 = —Ö–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å)
  //MODEL_SCALE = 0.35, downsampleRatioQuality = 0.7 = —Ö–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ, 45-55–º—Å –º–æ–¥–µ–ª–∏ –∏ 55-65–º—Å –Ω–∞ –∫–∞–¥—Ä
  //MODEL_SCALE = 0.25, downsampleRatioQuality = 0.8 = –Ω–æ—Ä–º–∫–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (—Å—ä–µ–¥–∞–µ—Ç –Ω–∞—É—à–Ω–∏–∫–∏), 30-35–º—Å –º–æ–¥–µ–ª–∏ –∏ 45-55–º—Å –Ω–∞ –∫–∞–¥
  //MODEL_SCALE = 0.2, downsampleRatioQuality = 0.7 = —Ç–∞–∫ —Å–µ–±–µ –∫–∞—á–µ—Å—Ç–≤–æ (—Å—ä–µ–¥–∞–µ—Ç —Ä—É–∫–∏), 20-25–º—Å –º–æ–¥–µ–ª–∏ –∏ 30-35–º—Å –Ω–∞ –∫–∞–¥—Ä
  //MODEL_SCALE = 0.3, downsampleRatioQuality = 0.7 = –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, 35-40–º—Å –º–æ–¥–µ–ª–∏ –∏ 45-50–º—Å –Ω–∞ –∫–∞–¥—Ä
  //MODEL_SCALE = 0.2, downsampleRatioQuality = 0.8 = –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, 25–º—Å –º–æ–¥–µ–ª–∏ –∏ 35-40–º—Å –Ω–∞ –∫–∞–¥—Ä
  
  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const USE_GAMMA_CORRECTION = true; // true/false: –∫–æ—Ä—Ä–µ–∫—Ü–∏—è —è—Ä–∫–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
  const GAMMA = 1.5; // 1.0-1.3: –≥–∞–º–º–∞-–∫–æ—Ä—Ä–µ–∫—Ü–∏—è (>1 = –æ—Å–≤–µ—Ç–ª–µ–Ω–∏–µ —Ç–µ–º–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π, —É–ª—É—á—à–∞–µ—Ç —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é)
  
  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Å–∫–∏
  const TEMPORAL_SMOOTHING = 0.85; // 0.5-0.95: –±–æ–ª—å—à–µ = –±—ã—Å—Ç—Ä–µ–µ —Ä–µ–∞–∫—Ü–∏—è (–º–µ–Ω—å—à–µ —à–ª–µ–π—Ñ), –Ω–æ –±–æ–ª—å—à–µ –º–µ—Ä—Ü–∞–Ω–∏—è
  const ADAPTIVE_SMOOTHING = true; // true/false: –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ (–º–µ–Ω—å—à–µ —à–ª–µ–π—Ñ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏)
  const BLUR_RADIUS = 0.35; // 0-3: —Ä–∞–¥–∏—É—Å —Ä–∞–∑–º—ã—Ç–∏—è –º–∞—Å–∫–∏ (–º–µ–Ω—å—à–µ = —á–µ—Ç—á–µ –∫—Ä–∞—è, –Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã)
  
  // –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (Opening + Closing) - —É–±–∏—Ä–∞—é—Ç —à—É–º –∏ –∑–∞–ø–æ–ª–Ω—è—é—Ç –¥—ã—Ä—ã
  const USE_MORPHOLOGY = true; // true/false: –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
  const MORPH_RADIUS = 1; // 1-2: —Ä–∞–¥–∏—É—Å –¥–ª—è erosion/dilation (–±–æ–ª—å—à–µ = —Å–∏–ª—å–Ω–µ–µ —ç—Ñ—Ñ–µ–∫—Ç, –Ω–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ)
  
  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ–Ω–∞
  const BACKGROUND_BLUR = 0; // 0-5: —Ä–∞–¥–∏—É—Å —Ä–∞–∑–º—ã—Ç–∏—è —Ñ–æ–Ω–∞ (px), –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ–Ω–∞
  
  // –§—É–Ω–∫—Ü–∏—è Erosion (—Å—É–∂–µ–Ω–∏–µ –º–∞—Å–∫–∏, —É–±–∏—Ä–∞–µ—Ç —à—É–º)
  const applyErosion = (imageData, width, height, radius) => {
    const data = imageData.data;
    const output = new Uint8ClampedArray(data.length);
    output.set(data); // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    
    for (let y = radius; y < height - radius; y++) {
      for (let x = radius; x < width - radius; x++) {
        let minVal = 255;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç—å
        for (let dy = -radius; dy <= radius; dy++) {
          for (let dx = -radius; dx <= radius; dx++) {
            const idx = ((y + dy) * width + (x + dx)) * 4;
            minVal = Math.min(minVal, data[idx]); // –ë–µ—Ä–µ–º –º–∏–Ω–∏–º—É–º (grayscale, –≤—Å–µ –∫–∞–Ω–∞–ª—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã)
          }
        }
        
        const idx = (y * width + x) * 4;
        output[idx] = output[idx + 1] = output[idx + 2] = minVal;
      }
    }
    
    // –ö–æ–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ
    data.set(output);
  };
  
  // –§—É–Ω–∫—Ü–∏—è Dilation (—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –º–∞—Å–∫–∏, –∑–∞–ø–æ–ª–Ω—è–µ—Ç –¥—ã—Ä—ã)
  const applyDilation = (imageData, width, height, radius) => {
    const data = imageData.data;
    const output = new Uint8ClampedArray(data.length);
    output.set(data);
    
    for (let y = radius; y < height - radius; y++) {
      for (let x = radius; x < width - radius; x++) {
        let maxVal = 0;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç—å
        for (let dy = -radius; dy <= radius; dy++) {
          for (let dx = -radius; dx <= radius; dx++) {
            const idx = ((y + dy) * width + (x + dx)) * 4;
            maxVal = Math.max(maxVal, data[idx]); // –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º
          }
        }
        
        const idx = (y * width + x) * 4;
        output[idx] = output[idx + 1] = output[idx + 2] = maxVal;
      }
    }
    
    data.set(output);
  };
  
  // –§—É–Ω–∫—Ü–∏—è –ì–∞–º–º–∞-–∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ (–æ—Å–≤–µ—Ç–ª—è–µ—Ç —Ç–µ–º–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏, —É–ª—É—á—à–∞–µ—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç)
  const applyGammaCorrection = (imageData, gamma) => {
    const data = imageData.data;
    const gammaCorrection = 1 / gamma;
    
    // –ü—Ä–µ–¥–≤—ã—á–∏—Å–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è (256 –∑–Ω–∞—á–µ–Ω–∏–π)
    const lookupTable = new Uint8Array(256);
    for (let i = 0; i < 256; i++) {
      lookupTable[i] = Math.min(255, Math.max(0, 255 * Math.pow(i / 255, gammaCorrection)));
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ –∫–∞–∂–¥–æ–º—É –ø–∏–∫—Å–µ–ª—é (—Ç–æ–ª—å–∫–æ RGB, –Ω–µ –∞–ª—å—Ñ–∞)
    for (let i = 0; i < data.length; i += 4) {
      data[i] = lookupTable[data[i]];         // R
      data[i + 1] = lookupTable[data[i + 1]]; // G
      data[i + 2] = lookupTable[data[i + 2]]; // B
    }
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞–∑–Ω–∏—Ü—ã –º–µ–∂–¥—É –º–∞—Å–∫–∞–º–∏ (–¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ smoothing)
  const calculateMaskDifference = (mask1, mask2) => {
    if (!mask1 || !mask2 || mask1.length !== mask2.length) return 1.0;
    
    let totalDiff = 0;
    for (let i = 0; i < mask1.length; i++) {
      totalDiff += Math.abs(mask1[i] - mask2[i]);
    }
    return totalDiff / mask1.length;
  };
  
  useEffect(() => {
    // –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ canvas –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ)
    downsampleCanvasRef.current = document.createElement('canvas');
    maskCanvasRef.current = document.createElement('canvas');
    fullMaskCanvasRef.current = document.createElement('canvas');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ç–æ–∫ —Å –∫–∞–º–µ—Ä—ã
    navigator.mediaDevices
      .getUserMedia({ video: true })
      .then((stream) => {
        if (videoRef.current) {
          videoRef.current.srcObject = stream;
          videoRef.current.play().catch(console.error);
        }
      })
      .catch(console.error);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ONNX Runtime - –ü–†–û–°–¢–ê–Ø –°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø
    ort.env.wasm.numThreads = 1;
    ort.env.wasm.simd = true;
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ - —Ç–æ–ª—å–∫–æ WASM –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    console.log("üîÑ Loading model with WASM...");
    ort.InferenceSession.create("/rvm_mobilenetv3_fp32.onnx", {
      executionProviders: ['wasm'],
      graphOptimizationLevel: 'all',
    }).then((sess) => {
      console.log("‚úÖ Model loaded!");
      backendNameRef.current = 'WASM (CPU)';
      
      if (onStatsUpdate) {
        onStatsUpdate({
          fps: null,
          avgFps: null,
          modelTime: null,
          fullFrameTime: null,
          modelActive: false,
          backend: 'WASM (CPU)'
        });
      }
      
      setSession(sess);
      
      recRef.current = [
        new ort.Tensor("float32", new Float32Array(1).fill(0), [1, 1, 1, 1]),
        new ort.Tensor("float32", new Float32Array(1).fill(0), [1, 1, 1, 1]),
        new ort.Tensor("float32", new Float32Array(1).fill(0), [1, 1, 1, 1]),
        new ort.Tensor("float32", new Float32Array(1).fill(0), [1, 1, 1, 1])
      ];
    }).catch((error) => {
      console.error("‚ùå Error loading model:", error);
    });

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ–Ω–∞
    const bgCanvas = document.createElement('canvas');
    bgCanvas.width = 1280;
    bgCanvas.height = 960;
    const bgCtx = bgCanvas.getContext('2d');
    const gradient = bgCtx.createLinearGradient(0, 0, 1280, 960);
    gradient.addColorStop(0, '#1a1a2e');
    gradient.addColorStop(1, '#16213e');
    bgCtx.fillStyle = gradient;
    bgCtx.fillRect(0, 0, 1280, 960);
    backgroundRef.current = bgCtx.getImageData(0, 0, 1280, 960);
  }, []);

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ–Ω–∞
  useEffect(() => {
    const updateBackground = () => {
      if (!videoRef.current) return;
      const video = videoRef.current;

      // –ñ–¥—ë–º, –ø–æ–∫–∞ –≤–∏–¥–µ–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ä–∞–∑–º–µ—Ä—ã
      if (video.videoWidth === 0 || video.videoHeight === 0) {
        requestAnimationFrame(updateBackground);
        return;
      }

      const canvasW = video.videoWidth;
      const canvasH = video.videoHeight;

      const bgCanvas = document.createElement('canvas');
      bgCanvas.width = canvasW;
      bgCanvas.height = canvasH;
      const bgCtx = bgCanvas.getContext('2d');

      if (backgroundImage) {
        const img = new Image();
        img.onload = () => {
          const imgW = img.width;
          const imgH = img.height;

          // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∫ –≤ CSS background-size: cover
          const scale = Math.max(canvasW / imgW, canvasH / imgH);
          const scaledW = imgW * scale;
          const scaledH = imgH * scale;
          const offsetX = (canvasW - scaledW) / 2;
          const offsetY = (canvasH - scaledH) / 2;

          // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–º—ã—Ç–∏–µ –∫ —Ñ–æ–Ω—É –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –∫–æ–º–ø–æ–∑–∏—Ç–∏–Ω–≥–∞
          if (BACKGROUND_BLUR > 0) {
            bgCtx.filter = `blur(${BACKGROUND_BLUR}px)`;
          }
          bgCtx.drawImage(img, offsetX, offsetY, scaledW, scaledH);
          bgCtx.filter = 'none'; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
          
          backgroundRef.current = bgCtx.getImageData(0, 0, canvasW, canvasH);
        };
        img.src = backgroundImage;
      } else {
        // fallback: –≥—Ä–∞–¥–∏–µ–Ω—Ç, –ø–æ–¥ —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ
        const gradient = bgCtx.createLinearGradient(0, 0, canvasW, canvasH);
        gradient.addColorStop(0, '#1a1a2e');
        gradient.addColorStop(1, '#16213e');
        bgCtx.fillStyle = gradient;
        bgCtx.fillRect(0, 0, canvasW, canvasH);
        backgroundRef.current = bgCtx.getImageData(0, 0, canvasW, canvasH);
      }
    };
  updateBackground();
}, [backgroundImage]);

  useEffect(() => {
    let animationId;

    const drawFrame = async () => {
      if (!videoRef.current || !canvasRef.current) {
        animationId = requestAnimationFrame(drawFrame);
        return;
      }

      const video = videoRef.current;
      const canvas = canvasRef.current;
      const ctx = canvas.getContext("2d");

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∏–¥–µ–æ —É–∂–µ –∏–º–µ–µ—Ç —Ä–∞–∑–º–µ—Ä—ã
      if (video.videoWidth > 0 && video.videoHeight > 0) {
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;

        if (session && recRef.current.length > 0) {
          const startTime = performance.now();

          // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
          const origWidth = canvas.width;
          const origHeight = canvas.height;
          
          // –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –º–æ–¥–µ–ª–∏
          const modelWidth = Math.round(origWidth * MODEL_SCALE);
          const modelHeight = Math.round(origHeight * MODEL_SCALE);
          
          // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π canvas –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
          const downsampleCanvas = downsampleCanvasRef.current;
          downsampleCanvas.width = modelWidth;
          downsampleCanvas.height = modelHeight;
          const downsampleCtx = downsampleCanvas.getContext('2d');
          
          // –†–∏—Å—É–µ–º —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
          downsampleCtx.drawImage(video, 0, 0, modelWidth, modelHeight);
          const imageData = downsampleCtx.getImageData(0, 0, modelWidth, modelHeight);
          
          // –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–∞–º–º–∞-–∫–æ—Ä—Ä–µ–∫—Ü–∏—é –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ (–æ—Å–æ–±–µ–Ω–Ω–æ –≤ —Ç–µ–º–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö)
          if (USE_GAMMA_CORRECTION && GAMMA !== 1.0) {
            applyGammaCorrection(imageData, GAMMA);
          }
          
          const rgbData = new Float32Array(3 * modelWidth * modelHeight);
          
          // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ RGB –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è [0, 1]
          for (let i = 0; i < modelWidth * modelHeight; i++) {
            rgbData[i] = imageData.data[i * 4] / 255.0; // R
            rgbData[modelWidth * modelHeight + i] = imageData.data[i * 4 + 1] / 255.0; // G
            rgbData[2 * modelWidth * modelHeight + i] = imageData.data[i * 4 + 2] / 255.0; // B
          }

          // –ü–µ—Ä–µ–¥–∞—ë–º —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –º–æ–¥–µ–ª—å
          const inputTensor = new ort.Tensor("float32", rgbData, [1, 3, modelHeight, modelWidth]);
          // downsample_ratio - –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ (0.6 = —Ö–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å)
          const downsampleRatio = new ort.Tensor("float32", new Float32Array([downsampleRatioQuality]), [1]);

          try {
            // –ó–∞–ø—É—Å–∫ –º–æ–¥–µ–ª–∏
            const feeds = {
              src: inputTensor,
              r1i: recRef.current[0],
              r2i: recRef.current[1],
              r3i: recRef.current[2],
              r4i: recRef.current[3],
              downsample_ratio: downsampleRatio
            };

            // –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ–ª–∏
            const modelStartTime = performance.now();
            const results = await session.run(feeds);
            const modelInferenceTime = performance.now() - modelStartTime;
            
            // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–æ–Ω–∏ –≤ —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ)
            const phaSmall = results.pha.data;  // –ú–∞—Å–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ rec states
            if (results.r1o) recRef.current[0] = results.r1o;
            if (results.r2o) recRef.current[1] = results.r2o;
            if (results.r3o) recRef.current[2] = results.r3o;
            if (results.r4o) recRef.current[3] = results.r4o;

            // –†–∏—Å—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π canvas
            ctx.drawImage(video, 0, 0, origWidth, origHeight);
            const originalImageData = ctx.getImageData(0, 0, origWidth, origHeight);
            
            // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –º–∞—Å–∫—É –æ–±—Ä–∞—Ç–Ω–æ –¥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ canvas
            const maskCanvas = maskCanvasRef.current;
            maskCanvas.width = modelWidth;
            maskCanvas.height = modelHeight;
            const maskCtx = maskCanvas.getContext('2d');
            const maskImageData = maskCtx.createImageData(modelWidth, modelHeight);
            
            // 1. Temporal Smoothing (EMA) - —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏
            const prevMask = prevMaskRef.current;
            let smoothingCoeff = TEMPORAL_SMOOTHING;
            
            if (prevMask && prevMask.length === phaSmall.length) {
              // –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ: –ø—Ä–∏ –±–æ–ª—å—à–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω—å—à–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
              if (ADAPTIVE_SMOOTHING) {
                const diff = calculateMaskDifference(phaSmall, prevMask);
                // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–æ–µ (–¥–≤–∏–∂–µ–Ω–∏–µ), –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª—å—à–∏–π –≤–µ—Å –Ω–æ–≤–æ–π –º–∞—Å–∫–∏
                // diff –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0, 1], –æ–±—ã—á–Ω–æ 0.01-0.3
                // –ü—Ä–∏ diff > 0.1 (—Å–∏–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ) —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                if (diff > 0.05) {
                  smoothingCoeff = Math.max(0.3, TEMPORAL_SMOOTHING - diff * 2);
                }
              }
              
              for (let i = 0; i < phaSmall.length; i++) {
                phaSmall[i] = phaSmall[i] * smoothingCoeff + prevMask[i] * (1 - smoothingCoeff);
              }
            }
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –º–∞—Å–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–¥—Ä–∞
            prevMaskRef.current = new Float32Array(phaSmall);
            
            // 2. –ó–∞–ø–æ–ª–Ω—è–µ–º —É–º–µ–Ω—å—à–µ–Ω–Ω—É—é –º–∞—Å–∫—É (grayscale)
            for (let i = 0; i < modelWidth * modelHeight; i++) {
              const alpha = Math.min(1, Math.max(0, phaSmall[i]));
              const alphaVal = alpha * 255;
              maskImageData.data[i * 4] = alphaVal;
              maskImageData.data[i * 4 + 1] = alphaVal;
              maskImageData.data[i * 4 + 2] = alphaVal;
              maskImageData.data[i * 4 + 3] = 255;
            }
            
            maskCtx.putImageData(maskImageData, 0, 0);
            
            // 3. –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (Opening + Closing)
            if (USE_MORPHOLOGY && MORPH_RADIUS > 0) {
              const morphImageData = maskCtx.getImageData(0, 0, modelWidth, modelHeight);
              
              // Opening: Erosion ‚Üí Dilation (—É–±–∏—Ä–∞–µ—Ç —à—É–º –Ω–∞ —Ñ–æ–Ω–µ)
              applyErosion(morphImageData, modelWidth, modelHeight, MORPH_RADIUS);
              applyDilation(morphImageData, modelWidth, modelHeight, MORPH_RADIUS);
              
              // Closing: Dilation ‚Üí Erosion (–∑–∞–ø–æ–ª–Ω—è–µ—Ç –¥—ã—Ä—ã –≤–Ω—É—Ç—Ä–∏ –æ–±—ä–µ–∫—Ç–∞)
              applyDilation(morphImageData, modelWidth, modelHeight, MORPH_RADIUS);
              applyErosion(morphImageData, modelWidth, modelHeight, MORPH_RADIUS);
              
              maskCtx.putImageData(morphImageData, 0, 0);
            }
            
            // 4. –ü—Ä–∏–º–µ–Ω—è–µ–º blur –Ω–∞ –º–∞–ª–µ–Ω—å–∫–æ–π –º–∞—Å–∫–µ (–±—ã—Å—Ç—Ä–µ–µ —á–µ–º –Ω–∞ –±–æ–ª—å—à–æ–π)
            if (BLUR_RADIUS > 0) {
              maskCtx.filter = `blur(${BLUR_RADIUS}px)`;
              maskCtx.drawImage(maskCanvas, 0, 0);
              maskCtx.filter = 'none';
            }
            
            // 5. –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –º–∞—Å–∫—É –¥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Å –±–∏–ª–∏–Ω–µ–π–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–µ–π
            const fullMaskCanvas = fullMaskCanvasRef.current;
            fullMaskCanvas.width = origWidth;
            fullMaskCanvas.height = origHeight;
            const fullMaskCtx = fullMaskCanvas.getContext('2d');
            
            // –í–∫–ª—é—á–∞–µ–º –±–∏–ª–∏–Ω–µ–π–Ω—É—é –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é –¥–ª—è –ø–ª–∞–≤–Ω—ã—Ö –∫—Ä–∞–µ–≤
            fullMaskCtx.imageSmoothingEnabled = true;
            fullMaskCtx.imageSmoothingQuality = 'high';
            
            fullMaskCtx.drawImage(maskCanvas, 0, 0, origWidth, origHeight);
            const fullMaskData = fullMaskCtx.getImageData(0, 0, origWidth, origHeight);

            // –ö–æ–º–ø–æ–∑–∏—Ç–∏–Ω–≥ —Å —Ñ–æ–Ω–æ–º –∏—Å–ø–æ–ª—å–∑—É—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ –∏ —É–≤–µ–ª–∏—á–µ–Ω–Ω—É—é –º–∞—Å–∫—É
            const background = backgroundRef.current;
            const outputData = new Uint8ClampedArray(origWidth * origHeight * 4);
            
            for (let i = 0; i < origWidth * origHeight; i++) {
              const i4 = i * 4;
              const alpha = fullMaskData.data[i4] / 255.0;  // –ë–µ—Ä–µ–º –∞–ª—å—Ñ–∞ –∏–∑ —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–π –º–∞—Å–∫–∏
              const oneMinusAlpha = 1 - alpha;
              
              // –ë–µ—Ä–µ–º —Ü–≤–µ—Ç –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ
              const r = originalImageData.data[i4];
              const g = originalImageData.data[i4 + 1];
              const b = originalImageData.data[i4 + 2];
              
              const bgR = background ? background.data[i4] : 26;
              const bgG = background ? background.data[i4 + 1] : 26;
              const bgB = background ? background.data[i4 + 2] : 46;
              
              outputData[i4] = r * alpha + bgR * oneMinusAlpha;
              outputData[i4 + 1] = g * alpha + bgG * oneMinusAlpha;
              outputData[i4 + 2] = b * alpha + bgB * oneMinusAlpha;
              outputData[i4 + 3] = 255;
            }

            const outputImageData = new ImageData(outputData, origWidth, origHeight);
            ctx.putImageData(outputImageData, 0, 0);

            // –†–∞—Å—á–µ—Ç FPS (–æ–±—â–µ–µ –≤—Ä–µ–º—è –∫–∞–¥—Ä–∞)
            const frameTime = performance.now() - startTime;
            totalTimeRef.current += frameTime;
            frameCountRef.current += 1;
            const fps = 1000.0 / frameTime;
            const avgFps = (frameCountRef.current * 1000.0) / totalTimeRef.current;

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (throttled - —Ä–∞–∑ –≤ 100ms)
            const now = performance.now();
            if (onStatsUpdate && (now - lastStatsUpdateRef.current) > 100) {
              lastStatsUpdateRef.current = now;
              onStatsUpdate({
                fps: fps.toFixed(2),
                avgFps: avgFps.toFixed(2),
                modelTime: modelInferenceTime.toFixed(2), // –í—Ä–µ–º—è —Ç–æ–ª—å–∫–æ –º–æ–¥–µ–ª–∏
                fullFrameTime: frameTime.toFixed(2), // –ü–æ–ª–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–¥—Ä–∞
                modelActive: true,
                backend: backendNameRef.current
              });
            }
          } catch (error) {
            console.error("Model inference error:", error);
            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
            const now = performance.now();
            if (onStatsUpdate && (now - lastStatsUpdateRef.current) > 100) {
              lastStatsUpdateRef.current = now;
              onStatsUpdate({
                fps: null,
                avgFps: null,
                modelTime: null,
                fullFrameTime: null,
                modelActive: false,
                backend: backendNameRef.current
              });
            }
          }
        } else {
          ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
          const now = performance.now();
          if (onStatsUpdate && (now - lastStatsUpdateRef.current) > 100) {
            lastStatsUpdateRef.current = now;
            onStatsUpdate({
              fps: null,
              avgFps: null,
              modelTime: null,
              fullFrameTime: null,
              modelActive: false,
              backend: backendNameRef.current
            });
          }
        }
      }

      animationId = requestAnimationFrame(drawFrame);
    };

    animationId = requestAnimationFrame(drawFrame);

    return () => {
      if (animationId) {
        cancelAnimationFrame(animationId);
      }
    };
  }, [session]);

  useEffect(() => {
    const bgBlock = blocks.find(b => b.id === "b1");
    if (!bgBlock?.employee) return;

    const employee = bgBlock.employee;
    const privacyLevel = bgBlock.level || employee.privacy_level || "low";

    const textBlocks = [];

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ "–æ–±—Ä–∞—Ç–Ω–æ–≥–æ" —Ü–≤–µ—Ç–∞ –∫ —Ñ–æ–Ω—É
    const getInverseColor = (x, y, width, height) => {
      const bg = backgroundRef.current;
      if (!bg) return "white";
      const data = bg.data;
      let rSum = 0, gSum = 0, bSum = 0, count = 0;

      for (let dy = 0; dy < height; dy++) {
        for (let dx = 0; dx < width; dx++) {
          const px = x + dx;
          const py = y + dy;
          if (px >= bg.width || py >= bg.height) continue;
          const idx = (py * bg.width + px) * 4;
          rSum += data[idx];
          gSum += data[idx + 1];
          bSum += data[idx + 2];
          count++;
        }
      }

      const rAvg = rSum / count;
      const gAvg = gSum / count;
      const bAvg = bSum / count;

      // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞
      const rInv = 255 - rAvg;
      const gInv = 255 - gAvg;
      const bInv = 255 - bAvg;

      return `rgb(${Math.round(rInv)}, ${Math.round(gInv)}, ${Math.round(bInv)})`;
    };

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Ü–≤–µ—Ç–æ–º
    const createTextBlock = (id, text, x, y, fontSize) => ({
      id,
      text,
      x,
      y,
      fontSize,
      color: getInverseColor(x, y, 100, fontSize + 10) // –±–µ—Ä—ë–º –æ–±–ª–∞—Å—Ç—å –ø–æ–¥ —Ç–µ–∫—Å—Ç ~100px —à–∏—Ä–∏–Ω–æ–π
    });

    textBlocks.push(createTextBlock("name", employee.full_name, 20, 20, 24));
    textBlocks.push(createTextBlock("position", employee.position, 20, 60, 20));

    if (privacyLevel === "medium" || privacyLevel === "high") {
      textBlocks.push(createTextBlock("company", employee.company, 20, 100, 18));
      textBlocks.push(createTextBlock("department", employee.department, 20, 140, 18));
      textBlocks.push(createTextBlock("location", employee.office_location, 20, 180, 18));
    }

    if (privacyLevel === "high") {
      textBlocks.push(createTextBlock("email", `Email: ${employee.contact.email}`, 20, 220, 16));
      textBlocks.push(createTextBlock("telegram", `Telegram: ${employee.contact.telegram}`, 20, 260, 16));
    }

    setBlocks([bgBlock, ...textBlocks]);
  }, [blocks[0]?.employee, blocks[0]?.level, backgroundRef.current]);

  const handleUpdate = (id, newProps) => {
    setBlocks((prev) => prev.map((b) => (b.id === id ? { ...b, ...newProps } : b)));
  };

  const handleBackgroundClick = () => setSelectedBlockId(null);

  return (
    <div
      ref={containerRef}
      style={{
        position: "relative",
        width: "1280px",
        height: "960px",
        overflow: "hidden",
      }}
      onClick={handleBackgroundClick}
    >
      <video
        ref={videoRef}
        autoPlay
        muted
        playsInline
        style={{ display: "none" }}
      />
      <canvas
        ref={canvasRef}
        style={{ width: "100%", height: "100%", background: "black" }}
      />

      {blocks.map((b) => (
        <DraggableText
          key={b.id}
          block={b}
          selected={b.id === selectedBlockId}
          onSelect={setSelectedBlockId}
          onUpdate={handleUpdate}
          parentRef={containerRef}
        />
      ))}
    </div>
  );
}
