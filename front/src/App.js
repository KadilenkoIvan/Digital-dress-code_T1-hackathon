import React, { useState } from "react";
import WebcamWithText from "./WebcamWithText";
import "./App.css";

function App() {
  const [blocks, setBlocks] = useState([]);
  const [selectedBlockId, setSelectedBlockId] = useState(null);
  const [backgroundBlur, setBackgroundBlur] = useState(0); // –†–∞–∑–º—ã—Ç–∏–µ —Ñ–æ–Ω–∞ (0-50)
  const [modelScale, setModelScale] = useState(0.2); // –ú–∞—Å—à—Ç–∞–± –º–æ–¥–µ–ª–∏ (0.0-1.0)
  const [downsampleRatio, setDownsampleRatio] = useState(0.8); // Downsample ratio (0.5-0.9)
  const [stats, setStats] = useState({
    fps: null,
    avgFps: null,
    modelTime: null,
    fullFrameTime: null,
    modelActive: false,
    backend: 'Loading...'
  });

  const currentLevel = blocks[0]?.level || "low";

  const handleLevelChange = (level) => {
    if (blocks.length === 0) return;
    setBlocks(prev => prev.map(b => b.id === "b1" ? { ...b, level } : b));
  };

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = () => {
        if (blocks.length === 0) {
          setBlocks([{ id: "b1", image: reader.result, level: currentLevel }]);
        } else {
          setBlocks([{ ...blocks[0], image: reader.result }]);
        }
      };
      reader.readAsDataURL(file);
    }
  };

  const handleJsonUpload = (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = () => {
      try {
        const json = JSON.parse(reader.result);
        if (!json.employee) {
          alert("JSON –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–±—ä–µ–∫—Ç employee!");
          return;
        }

        setBlocks(prev => {
          const bgBlock = prev.find(b => b.id === "b1") || { id: "b1", type: "metadata" };
          return [{
            ...bgBlock,
            employee: json.employee,
            level: json.employee.privacy_level || "low"
          }];
        });
      } catch (err) {
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON: " + err.message);
      }
    };
    reader.readAsText(file);
  };

  const handleAddTextBlock = () => {
    const newId = `text_${Date.now()}`;
    const newBlock = {
      id: newId,
      type: 'text', // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø
      text: "–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç",
      x: 50,
      y: 300,
      fontSize: 20,
      color: "white",
      fontFamily: "Arial",
      fontWeight: "normal",
      fontStyle: "normal"
    };
    setBlocks(prev => [...prev, newBlock]);
    setSelectedBlockId(newId);
  };

  const handleAddImageBlock = (e) => {
    const file = e.target.files[0];
    if (!file) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if (!file.type.startsWith('image/')) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!');
      return;
    }

    const reader = new FileReader();
    reader.onload = () => {
      const newId = `image_${Date.now()}`;
      const newBlock = {
        id: newId,
        type: 'image',
        imageSrc: reader.result,
        x: 100,
        y: 100,
        width: 200,
        height: 200,
        objectFit: 'contain'
      };
      setBlocks(prev => [...prev, newBlock]);
      setSelectedBlockId(newId);
    };
    reader.readAsDataURL(file);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º input —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª —Å–Ω–æ–≤–∞
    e.target.value = '';
  };

  return (
    <div className="app-container">
      <div className="stats-panel">
        <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
        <div className="stat-item">
          <span className="stat-label">FPS:</span>
          <span className="stat-value">{stats.fps !== null ? stats.fps : 'None'}</span>
        </div>
        <div className="stat-item">
          <span className="stat-label">–°—Ä–µ–¥–Ω–∏–π FPS:</span>
          <span className="stat-value">{stats.avgFps !== null ? stats.avgFps : 'None'}</span>
        </div>
        <div className="stat-item">
          <span className="stat-label">–í—Ä–µ–º—è –º–æ–¥–µ–ª–∏:</span>
          <span className="stat-value">{stats.modelTime !== null ? `${stats.modelTime} ms` : 'None'}</span>
        </div>
        <div className="stat-item">
          <span className="stat-label">–í—Ä–µ–º—è –∫–∞–¥—Ä–∞ (–ø–æ–ª–Ω–æ–µ):</span>
          <span className="stat-value">{stats.fullFrameTime !== null ? `${stats.fullFrameTime} ms` : 'None'}</span>
        </div>
        <div className="stat-item">
          <span className="stat-label">–ú–æ–¥–µ–ª—å:</span>
          <span className={`stat-value ${stats.modelActive ? 'active' : 'inactive'}`}>
            {stats.modelActive ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}
          </span>
        </div>
        <div className="stat-item">
          <span className="stat-label">Backend:</span>
          <span className="stat-value">{stats.backend}</span>
        </div>
      </div>

      <div className="webcam-wrapper">
        <WebcamWithText
          blocks={blocks}
          setBlocks={setBlocks}
          selectedBlockId={selectedBlockId}
          setSelectedBlockId={setSelectedBlockId}
          onStatsUpdate={setStats}
          backgroundImage={blocks[0]?.image || null}
          backgroundBlur={backgroundBlur}
          modelScale={modelScale}
          downsampleRatio={downsampleRatio}
        />
      </div>

      <div className="settings-panel">
        <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
        <div className="setting-group">
          <label>
            –ú–∞—Å—à—Ç–∞–± –º–æ–¥–µ–ª–∏ (–∫–∞—á–µ—Å—Ç–≤–æ): {modelScale.toFixed(2)}
            <input 
              type="range" 
              min="0.1" 
              max="1.0" 
              step="0.05"
              value={modelScale} 
              onChange={(e) => setModelScale(parseFloat(e.target.value))}
              className="model-scale-slider"
            />
            <span className="slider-hint">–ú–µ–Ω—å—à–µ = –±—ã—Å—Ç—Ä–µ–µ, –Ω–æ –Ω–∏–∂–µ –∫–∞—á–µ—Å—Ç–≤–æ</span>
          </label>
        </div>
        <div className="setting-group">
          <label>
            Downsample Ratio: {downsampleRatio.toFixed(2)}
            <input 
              type="range" 
              min="0.5" 
              max="1.0" 
              step="0.05"
              value={downsampleRatio} 
              onChange={(e) => setDownsampleRatio(parseFloat(e.target.value))}
              className="downsample-slider"
            />
            <span className="slider-hint">–ú–µ–Ω—å—à–µ = –±—ã—Å—Ç—Ä–µ–µ, –±–æ–ª—å—à–µ = –ª—É—á—à–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫—Ä–∞—ë–≤</span>
          </label>
        </div>
        <div className="setting-group">
          <label>
            –£—Ä–æ–≤–µ–Ω—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:
            <select
              value={currentLevel}
              onChange={(e) => handleLevelChange(e.target.value)}
            >
              <option value="low">Low</option>
              <option value="medium">Medium</option>
              <option value="high">High</option>
            </select>
          </label>
        </div>
        <div className="setting-group">
          <label>
            –ó–∞–¥–Ω–∏–π —Ñ–æ–Ω:
            <input type="file" accept="image/*" onChange={handleImageChange} />
          </label>
        </div>
        <div className="setting-group">
          <label>
            –†–∞–∑–º—ã—Ç–∏–µ —Ñ–æ–Ω–∞: {backgroundBlur}px
            <input 
              type="range" 
              min="0" 
              max="50" 
              step="1"
              value={backgroundBlur} 
              onChange={(e) => setBackgroundBlur(parseFloat(e.target.value))}
              className="blur-slider"
            />
          </label>
        </div>
        <div className="setting-group">
          <label>
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ:
            <input type="file" accept=".json" onChange={handleJsonUpload} />
          </label>
        </div>
        <div className="setting-group">
          <button 
            className="add-text-btn"
            onClick={handleAddTextBlock}
          >
            ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç
          </button>
        </div>
        <div className="setting-group">
          <label className="add-image-label">
            üñºÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É
            <input 
              type="file" 
              accept="image/*" 
              onChange={handleAddImageBlock}
              style={{ display: 'none' }}
            />
          </label>
        </div>
      </div>
    </div>
  );
}

export default App;
